configValidationMode: error
service:
  name: events

app: bimdive
org: shaygoldmanz
frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  region: eu-west-2
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - IssueDiscoveredQueue
          - Arn
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - IssueContainerDiscoveredQueue
          - Arn
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - ScanCreatedQueue
          - Arn
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - UserDiscoveredQueue
          - Arn

functions:
  GraphQL:
    handler: src/lambdas/api/graphql.lambda.graphql
    memorySize: 128
    disableLogs: true
    reservedConcurrency: 2
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
    events:
      - http:
          path: graphql
          method: post
          cors: true

  GenerateMetabaseEmbed:
    handler: src/lambdas/api/metabase.lambda.embed
    memorySize: 128
    disableLogs: true
    reservedConcurrency: 2
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      METABASE_SECRET: ${env:METABASE_SECRET, param:METABASE_SECRET}
    events:
      - http:
          path: metabase/embed
          method: post
          cors: true

  AuthenticateUser:
    handler: src/lambdas/api/auth.lambda.authenticateUser
    memorySize: 128
    disableLogs: true
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
    events:
      - http:
          path: auth/user
          method: post

  CreateScan:
    handler: src/lambdas/api/scan.lambda.createProjectScans
    memorySize: 128
    disableLogs: true
    reservedConcurrency: 2
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      AWS_SQS_REGION: eu-west-2
      QUEUE_SCAN_CREATED:
        Ref: ScanCreatedQueue
    events:
      - http:
          path: scan
          method: post
          cors: true

  RefreshAuthTokens:
    handler: src/lambdas/events/refresh-auth-tokens.lambda.handle
    memorySize: 128
    disableLogs: true
    timeout: 30
    reservedConcurrency: 2
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      LOOK_AHEAD_IN_MINUTES: ${env:LOOK_AHEAD_IN_MINUTES, param:LOOK_AHEAD_IN_MINUTES}
    events:
      - schedule:
          name: refresh-auth-tokens
          description: refreshes all access tokens for authenticated users (keeps tokens valid)
          rate: rate(6 hours)
          enabled: true

  ScanCreated:
    handler: src/lambdas/events/scan-created.lambda.handle
    memorySize: 128
    reservedConcurrency: 2
    disableLogs: true
    timeout: 20
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      AWS_SQS_REGION: eu-west-2
      QUEUE_ISSUE_DISCOVERED:
        Ref: IssueDiscoveredQueue
      QUEUE_ISSUE_CONTAINER_DISCOVERED:
        Ref: IssueContainerDiscoveredQueue
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - ScanCreatedQueue
              - Arn

  IssueDiscovered:
    handler: src/lambdas/events/issue-discovered.lambda.handle
    memorySize: 128
    reservedConcurrency: 10
    disableLogs: true
    timeout: 30
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      AWS_SQS_REGION: eu-west-2
      QUEUE_USER_DISCOVERED:
        Ref: UserDiscoveredQueue
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - IssueDiscoveredQueue
              - Arn

  IssueContainerDiscovered:
    handler: src/lambdas/events/issue-container-discovered.lambda.handle
    memorySize: 128
    reservedConcurrency: 10
    disableLogs: true
    timeout: 10
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - IssueContainerDiscoveredQueue
              - Arn

  UserDiscovered:
    handler: src/lambdas/events/user-discovered.lambda.handle
    memorySize: 128
    reservedConcurrency: 10
    disableLogs: true
    environment:
      FORGE_CLIENT_ID: ${env:FORGE_CLIENT_ID, param:FORGE_CLIENT_ID}
      FORGE_CLIENT_SECRET: ${env:FORGE_CLIENT_SECRET, param:FORGE_CLIENT_SECRET}
      NODE_ENV: ${env:NODE_ENV, param:NODE_ENV}
      DB_CONNECTION_URI: ${env:DB_CONNECTION_URI, param:DB_CONNECTION_URI}
      LOGGER_LEVEL: ${env:LOGGER_LEVEL, param:LOGGER_LEVEL}
      LOGGER_PRETTY_PRINT: ${env:LOGGER_PRETTY_PRINT, param:LOGGER_PRETTY_PRINT}
      REST_API_URI: ${env:REST_API_URI, param:REST_API_URI}
      AWS_SQS_REGION: eu-west-2
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt:
              - UserDiscoveredQueue
              - Arn

resources:
  Resources:
    ScanCreatedQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-ScanCreated
        RedrivePolicy:
          maxReceiveCount: 2
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
    UserDiscoveredQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-UserDiscoveredQueue
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
    IssueContainerDiscoveredQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-IssueContainerDiscovered
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
    IssueDiscoveredQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-IssueDiscovered
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-DeadLetterQueue
