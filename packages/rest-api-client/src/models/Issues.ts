/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface Issues
 */
export interface Issues {
  /**
   * Note:
   * This is a Primary Key.<pk/>
   * @type {string}
   * @memberof Issues
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  providerId: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  issueContainerProviderId: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  subType?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  ownedBy?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  assignedTo?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  assignedToType?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  dueDate?: string;
  /**
   *
   * @type {string}
   * @memberof Issues
   */
  scannedAt: string;
}

export function IssuesFromJSON(json: any): Issues {
  return IssuesFromJSONTyped(json, false);
}

export function IssuesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Issues {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    providerId: json["provider_id"],
    issueContainerProviderId: json["issue_container_provider_id"],
    title: json["title"],
    status: json["status"],
    type: !exists(json, "type") ? undefined : json["type"],
    subType: !exists(json, "sub_type") ? undefined : json["sub_type"],
    ownedBy: !exists(json, "owned_by") ? undefined : json["owned_by"],
    assignedTo: !exists(json, "assigned_to") ? undefined : json["assigned_to"],
    assignedToType: !exists(json, "assigned_to_type")
      ? undefined
      : json["assigned_to_type"],
    dueDate: !exists(json, "due_date") ? undefined : json["due_date"],
    scannedAt: json["scanned_at"],
  };
}

export function IssuesToJSON(value?: Issues | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    provider_id: value.providerId,
    issue_container_provider_id: value.issueContainerProviderId,
    title: value.title,
    status: value.status,
    type: value.type,
    sub_type: value.subType,
    owned_by: value.ownedBy,
    assigned_to: value.assignedTo,
    assigned_to_type: value.assignedToType,
    due_date: value.dueDate,
    scanned_at: value.scannedAt,
  };
}
