/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  IssueCustomAttributes,
  IssueCustomAttributesFromJSON,
  IssueCustomAttributesToJSON,
} from "../models";

export interface IssueCustomAttributesDeleteRequest {
  id?: string;
  issueProviderId?: string;
  customAttributeProviderId?: string;
  type?: string;
  value?: string;
  scannedAt?: string;
  prefer?: IssueCustomAttributesDeletePreferEnum;
}

export interface IssueCustomAttributesGetRequest {
  id?: string;
  issueProviderId?: string;
  customAttributeProviderId?: string;
  type?: string;
  value?: string;
  scannedAt?: string;
  select?: string;
  order?: string;
  range?: string;
  rangeUnit?: string;
  offset?: string;
  limit?: string;
  prefer?: IssueCustomAttributesGetPreferEnum;
}

export interface IssueCustomAttributesPatchRequest {
  id?: string;
  issueProviderId?: string;
  customAttributeProviderId?: string;
  type?: string;
  value?: string;
  scannedAt?: string;
  prefer?: IssueCustomAttributesPatchPreferEnum;
  issueCustomAttributes?: IssueCustomAttributes;
}

export interface IssueCustomAttributesPostRequest {
  select?: string;
  prefer?: IssueCustomAttributesPostPreferEnum;
  issueCustomAttributes?: IssueCustomAttributes;
}

/**
 *
 */
export class IssueCustomAttributesApi extends runtime.BaseAPI {
  /**
   */
  async issueCustomAttributesDeleteRaw(
    requestParameters: IssueCustomAttributesDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.issueProviderId !== undefined) {
      queryParameters["issue_provider_id"] = requestParameters.issueProviderId;
    }

    if (requestParameters.customAttributeProviderId !== undefined) {
      queryParameters["custom_attribute_provider_id"] =
        requestParameters.customAttributeProviderId;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.value !== undefined) {
      queryParameters["value"] = requestParameters.value;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issue_custom_attributes`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issueCustomAttributesDelete(
    requestParameters: IssueCustomAttributesDeleteRequest
  ): Promise<void> {
    await this.issueCustomAttributesDeleteRaw(requestParameters);
  }

  /**
   */
  async issueCustomAttributesGetRaw(
    requestParameters: IssueCustomAttributesGetRequest
  ): Promise<runtime.ApiResponse<Array<IssueCustomAttributes>>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.issueProviderId !== undefined) {
      queryParameters["issue_provider_id"] = requestParameters.issueProviderId;
    }

    if (requestParameters.customAttributeProviderId !== undefined) {
      queryParameters["custom_attribute_provider_id"] =
        requestParameters.customAttributeProviderId;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.value !== undefined) {
      queryParameters["value"] = requestParameters.value;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    if (requestParameters.order !== undefined) {
      queryParameters["order"] = requestParameters.order;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.range !== undefined &&
      requestParameters.range !== null
    ) {
      headerParameters["Range"] = String(requestParameters.range);
    }

    if (
      requestParameters.rangeUnit !== undefined &&
      requestParameters.rangeUnit !== null
    ) {
      headerParameters["Range-Unit"] = String(requestParameters.rangeUnit);
    }

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issue_custom_attributes`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IssueCustomAttributesFromJSON)
    );
  }

  /**
   */
  async issueCustomAttributesGet(
    requestParameters: IssueCustomAttributesGetRequest
  ): Promise<Array<IssueCustomAttributes>> {
    const response = await this.issueCustomAttributesGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async issueCustomAttributesPatchRaw(
    requestParameters: IssueCustomAttributesPatchRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.issueProviderId !== undefined) {
      queryParameters["issue_provider_id"] = requestParameters.issueProviderId;
    }

    if (requestParameters.customAttributeProviderId !== undefined) {
      queryParameters["custom_attribute_provider_id"] =
        requestParameters.customAttributeProviderId;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.value !== undefined) {
      queryParameters["value"] = requestParameters.value;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issue_custom_attributes`,
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: IssueCustomAttributesToJSON(
        requestParameters.issueCustomAttributes
      ),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issueCustomAttributesPatch(
    requestParameters: IssueCustomAttributesPatchRequest
  ): Promise<void> {
    await this.issueCustomAttributesPatchRaw(requestParameters);
  }

  /**
   */
  async issueCustomAttributesPostRaw(
    requestParameters: IssueCustomAttributesPostRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issue_custom_attributes`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: IssueCustomAttributesToJSON(
        requestParameters.issueCustomAttributes
      ),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issueCustomAttributesPost(
    requestParameters: IssueCustomAttributesPostRequest
  ): Promise<void> {
    await this.issueCustomAttributesPostRaw(requestParameters);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum IssueCustomAttributesDeletePreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssueCustomAttributesGetPreferEnum {
  Countnone = "count=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssueCustomAttributesPatchPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssueCustomAttributesPostPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
