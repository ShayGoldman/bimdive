/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  AccessTokens,
  AccessTokensFromJSON,
  AccessTokensToJSON,
} from "../models";

export interface AccessTokensDeleteRequest {
  userProviderId?: string;
  accessToken?: string;
  refreshToken?: string;
  issuedAt?: string;
  expiresAt?: string;
  prefer?: AccessTokensDeletePreferEnum;
}

export interface AccessTokensGetRequest {
  userProviderId?: string;
  accessToken?: string;
  refreshToken?: string;
  issuedAt?: string;
  expiresAt?: string;
  select?: string;
  order?: string;
  range?: string;
  rangeUnit?: string;
  offset?: string;
  limit?: string;
  prefer?: AccessTokensGetPreferEnum;
}

export interface AccessTokensPatchRequest {
  userProviderId?: string;
  accessToken?: string;
  refreshToken?: string;
  issuedAt?: string;
  expiresAt?: string;
  prefer?: AccessTokensPatchPreferEnum;
  accessTokens?: AccessTokens;
}

export interface AccessTokensPostRequest {
  select?: string;
  prefer?: AccessTokensPostPreferEnum;
  accessTokens?: AccessTokens;
}

/**
 *
 */
export class AccessTokensApi extends runtime.BaseAPI {
  /**
   */
  async accessTokensDeleteRaw(
    requestParameters: AccessTokensDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.userProviderId !== undefined) {
      queryParameters["user_provider_id"] = requestParameters.userProviderId;
    }

    if (requestParameters.accessToken !== undefined) {
      queryParameters["access_token"] = requestParameters.accessToken;
    }

    if (requestParameters.refreshToken !== undefined) {
      queryParameters["refresh_token"] = requestParameters.refreshToken;
    }

    if (requestParameters.issuedAt !== undefined) {
      queryParameters["issued_at"] = requestParameters.issuedAt;
    }

    if (requestParameters.expiresAt !== undefined) {
      queryParameters["expires_at"] = requestParameters.expiresAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/access_tokens`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async accessTokensDelete(
    requestParameters: AccessTokensDeleteRequest
  ): Promise<void> {
    await this.accessTokensDeleteRaw(requestParameters);
  }

  /**
   */
  async accessTokensGetRaw(
    requestParameters: AccessTokensGetRequest
  ): Promise<runtime.ApiResponse<Array<AccessTokens>>> {
    const queryParameters: any = {};

    if (requestParameters.userProviderId !== undefined) {
      queryParameters["user_provider_id"] = requestParameters.userProviderId;
    }

    if (requestParameters.accessToken !== undefined) {
      queryParameters["access_token"] = requestParameters.accessToken;
    }

    if (requestParameters.refreshToken !== undefined) {
      queryParameters["refresh_token"] = requestParameters.refreshToken;
    }

    if (requestParameters.issuedAt !== undefined) {
      queryParameters["issued_at"] = requestParameters.issuedAt;
    }

    if (requestParameters.expiresAt !== undefined) {
      queryParameters["expires_at"] = requestParameters.expiresAt;
    }

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    if (requestParameters.order !== undefined) {
      queryParameters["order"] = requestParameters.order;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.range !== undefined &&
      requestParameters.range !== null
    ) {
      headerParameters["Range"] = String(requestParameters.range);
    }

    if (
      requestParameters.rangeUnit !== undefined &&
      requestParameters.rangeUnit !== null
    ) {
      headerParameters["Range-Unit"] = String(requestParameters.rangeUnit);
    }

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/access_tokens`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AccessTokensFromJSON)
    );
  }

  /**
   */
  async accessTokensGet(
    requestParameters: AccessTokensGetRequest
  ): Promise<Array<AccessTokens>> {
    const response = await this.accessTokensGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async accessTokensPatchRaw(
    requestParameters: AccessTokensPatchRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.userProviderId !== undefined) {
      queryParameters["user_provider_id"] = requestParameters.userProviderId;
    }

    if (requestParameters.accessToken !== undefined) {
      queryParameters["access_token"] = requestParameters.accessToken;
    }

    if (requestParameters.refreshToken !== undefined) {
      queryParameters["refresh_token"] = requestParameters.refreshToken;
    }

    if (requestParameters.issuedAt !== undefined) {
      queryParameters["issued_at"] = requestParameters.issuedAt;
    }

    if (requestParameters.expiresAt !== undefined) {
      queryParameters["expires_at"] = requestParameters.expiresAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/access_tokens`,
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: AccessTokensToJSON(requestParameters.accessTokens),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async accessTokensPatch(
    requestParameters: AccessTokensPatchRequest
  ): Promise<void> {
    await this.accessTokensPatchRaw(requestParameters);
  }

  /**
   */
  async accessTokensPostRaw(
    requestParameters: AccessTokensPostRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/access_tokens`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AccessTokensToJSON(requestParameters.accessTokens),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async accessTokensPost(
    requestParameters: AccessTokensPostRequest
  ): Promise<void> {
    await this.accessTokensPostRaw(requestParameters);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum AccessTokensDeletePreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum AccessTokensGetPreferEnum {
  Countnone = "count=none",
}
/**
 * @export
 * @enum {string}
 */
export enum AccessTokensPatchPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum AccessTokensPostPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
