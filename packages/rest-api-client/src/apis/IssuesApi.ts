/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import { Issues, IssuesFromJSON, IssuesToJSON } from "../models";

export interface IssuesDeleteRequest {
  id?: string;
  providerId?: string;
  issueContainerProviderId?: string;
  title?: string;
  status?: string;
  type?: string;
  subType?: string;
  assignedTo?: string;
  assignedToType?: string;
  dueDate?: string;
  scannedAt?: string;
  prefer?: IssuesDeletePreferEnum;
}

export interface IssuesGetRequest {
  id?: string;
  providerId?: string;
  issueContainerProviderId?: string;
  title?: string;
  status?: string;
  type?: string;
  subType?: string;
  assignedTo?: string;
  assignedToType?: string;
  dueDate?: string;
  scannedAt?: string;
  select?: string;
  order?: string;
  range?: string;
  rangeUnit?: string;
  offset?: string;
  limit?: string;
  prefer?: IssuesGetPreferEnum;
}

export interface IssuesPatchRequest {
  id?: string;
  providerId?: string;
  issueContainerProviderId?: string;
  title?: string;
  status?: string;
  type?: string;
  subType?: string;
  assignedTo?: string;
  assignedToType?: string;
  dueDate?: string;
  scannedAt?: string;
  prefer?: IssuesPatchPreferEnum;
  issues?: Issues;
}

export interface IssuesPostRequest {
  select?: string;
  prefer?: IssuesPostPreferEnum;
  issues?: Issues;
}

/**
 *
 */
export class IssuesApi extends runtime.BaseAPI {
  /**
   */
  async issuesDeleteRaw(
    requestParameters: IssuesDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.issueContainerProviderId !== undefined) {
      queryParameters["issue_container_provider_id"] =
        requestParameters.issueContainerProviderId;
    }

    if (requestParameters.title !== undefined) {
      queryParameters["title"] = requestParameters.title;
    }

    if (requestParameters.status !== undefined) {
      queryParameters["status"] = requestParameters.status;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.subType !== undefined) {
      queryParameters["sub_type"] = requestParameters.subType;
    }

    if (requestParameters.assignedTo !== undefined) {
      queryParameters["assigned_to"] = requestParameters.assignedTo;
    }

    if (requestParameters.assignedToType !== undefined) {
      queryParameters["assigned_to_type"] = requestParameters.assignedToType;
    }

    if (requestParameters.dueDate !== undefined) {
      queryParameters["due_date"] = requestParameters.dueDate;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issues`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issuesDelete(requestParameters: IssuesDeleteRequest): Promise<void> {
    await this.issuesDeleteRaw(requestParameters);
  }

  /**
   */
  async issuesGetRaw(
    requestParameters: IssuesGetRequest
  ): Promise<runtime.ApiResponse<Array<Issues>>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.issueContainerProviderId !== undefined) {
      queryParameters["issue_container_provider_id"] =
        requestParameters.issueContainerProviderId;
    }

    if (requestParameters.title !== undefined) {
      queryParameters["title"] = requestParameters.title;
    }

    if (requestParameters.status !== undefined) {
      queryParameters["status"] = requestParameters.status;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.subType !== undefined) {
      queryParameters["sub_type"] = requestParameters.subType;
    }

    if (requestParameters.assignedTo !== undefined) {
      queryParameters["assigned_to"] = requestParameters.assignedTo;
    }

    if (requestParameters.assignedToType !== undefined) {
      queryParameters["assigned_to_type"] = requestParameters.assignedToType;
    }

    if (requestParameters.dueDate !== undefined) {
      queryParameters["due_date"] = requestParameters.dueDate;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    if (requestParameters.order !== undefined) {
      queryParameters["order"] = requestParameters.order;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.range !== undefined &&
      requestParameters.range !== null
    ) {
      headerParameters["Range"] = String(requestParameters.range);
    }

    if (
      requestParameters.rangeUnit !== undefined &&
      requestParameters.rangeUnit !== null
    ) {
      headerParameters["Range-Unit"] = String(requestParameters.rangeUnit);
    }

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issues`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IssuesFromJSON)
    );
  }

  /**
   */
  async issuesGet(requestParameters: IssuesGetRequest): Promise<Array<Issues>> {
    const response = await this.issuesGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async issuesPatchRaw(
    requestParameters: IssuesPatchRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.issueContainerProviderId !== undefined) {
      queryParameters["issue_container_provider_id"] =
        requestParameters.issueContainerProviderId;
    }

    if (requestParameters.title !== undefined) {
      queryParameters["title"] = requestParameters.title;
    }

    if (requestParameters.status !== undefined) {
      queryParameters["status"] = requestParameters.status;
    }

    if (requestParameters.type !== undefined) {
      queryParameters["type"] = requestParameters.type;
    }

    if (requestParameters.subType !== undefined) {
      queryParameters["sub_type"] = requestParameters.subType;
    }

    if (requestParameters.assignedTo !== undefined) {
      queryParameters["assigned_to"] = requestParameters.assignedTo;
    }

    if (requestParameters.assignedToType !== undefined) {
      queryParameters["assigned_to_type"] = requestParameters.assignedToType;
    }

    if (requestParameters.dueDate !== undefined) {
      queryParameters["due_date"] = requestParameters.dueDate;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issues`,
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: IssuesToJSON(requestParameters.issues),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issuesPatch(requestParameters: IssuesPatchRequest): Promise<void> {
    await this.issuesPatchRaw(requestParameters);
  }

  /**
   */
  async issuesPostRaw(
    requestParameters: IssuesPostRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/issues`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: IssuesToJSON(requestParameters.issues),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async issuesPost(requestParameters: IssuesPostRequest): Promise<void> {
    await this.issuesPostRaw(requestParameters);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum IssuesDeletePreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssuesGetPreferEnum {
  Countnone = "count=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssuesPatchPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum IssuesPostPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
