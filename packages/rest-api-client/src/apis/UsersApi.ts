/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import { Users, UsersFromJSON, UsersToJSON } from "../models";

export interface UsersDeleteRequest {
  id?: string;
  providerId?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  profileImgUrl?: string;
  scannedAt?: string;
  modifiedAt?: string;
  createdAt?: string;
  prefer?: UsersDeletePreferEnum;
}

export interface UsersGetRequest {
  id?: string;
  providerId?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  profileImgUrl?: string;
  scannedAt?: string;
  modifiedAt?: string;
  createdAt?: string;
  select?: string;
  order?: string;
  range?: string;
  rangeUnit?: string;
  offset?: string;
  limit?: string;
  prefer?: UsersGetPreferEnum;
}

export interface UsersPatchRequest {
  id?: string;
  providerId?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  profileImgUrl?: string;
  scannedAt?: string;
  modifiedAt?: string;
  createdAt?: string;
  prefer?: UsersPatchPreferEnum;
  users?: Users;
}

export interface UsersPostRequest {
  select?: string;
  prefer?: UsersPostPreferEnum;
  users?: Users;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
  /**
   */
  async usersDeleteRaw(
    requestParameters: UsersDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.email !== undefined) {
      queryParameters["email"] = requestParameters.email;
    }

    if (requestParameters.firstName !== undefined) {
      queryParameters["first_name"] = requestParameters.firstName;
    }

    if (requestParameters.lastName !== undefined) {
      queryParameters["last_name"] = requestParameters.lastName;
    }

    if (requestParameters.profileImgUrl !== undefined) {
      queryParameters["profile_img_url"] = requestParameters.profileImgUrl;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    if (requestParameters.modifiedAt !== undefined) {
      queryParameters["modified_at"] = requestParameters.modifiedAt;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/users`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async usersDelete(requestParameters: UsersDeleteRequest): Promise<void> {
    await this.usersDeleteRaw(requestParameters);
  }

  /**
   */
  async usersGetRaw(
    requestParameters: UsersGetRequest
  ): Promise<runtime.ApiResponse<Array<Users>>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.email !== undefined) {
      queryParameters["email"] = requestParameters.email;
    }

    if (requestParameters.firstName !== undefined) {
      queryParameters["first_name"] = requestParameters.firstName;
    }

    if (requestParameters.lastName !== undefined) {
      queryParameters["last_name"] = requestParameters.lastName;
    }

    if (requestParameters.profileImgUrl !== undefined) {
      queryParameters["profile_img_url"] = requestParameters.profileImgUrl;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    if (requestParameters.modifiedAt !== undefined) {
      queryParameters["modified_at"] = requestParameters.modifiedAt;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    if (requestParameters.order !== undefined) {
      queryParameters["order"] = requestParameters.order;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.range !== undefined &&
      requestParameters.range !== null
    ) {
      headerParameters["Range"] = String(requestParameters.range);
    }

    if (
      requestParameters.rangeUnit !== undefined &&
      requestParameters.rangeUnit !== null
    ) {
      headerParameters["Range-Unit"] = String(requestParameters.rangeUnit);
    }

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/users`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UsersFromJSON)
    );
  }

  /**
   */
  async usersGet(requestParameters: UsersGetRequest): Promise<Array<Users>> {
    const response = await this.usersGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async usersPatchRaw(
    requestParameters: UsersPatchRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.providerId !== undefined) {
      queryParameters["provider_id"] = requestParameters.providerId;
    }

    if (requestParameters.email !== undefined) {
      queryParameters["email"] = requestParameters.email;
    }

    if (requestParameters.firstName !== undefined) {
      queryParameters["first_name"] = requestParameters.firstName;
    }

    if (requestParameters.lastName !== undefined) {
      queryParameters["last_name"] = requestParameters.lastName;
    }

    if (requestParameters.profileImgUrl !== undefined) {
      queryParameters["profile_img_url"] = requestParameters.profileImgUrl;
    }

    if (requestParameters.scannedAt !== undefined) {
      queryParameters["scanned_at"] = requestParameters.scannedAt;
    }

    if (requestParameters.modifiedAt !== undefined) {
      queryParameters["modified_at"] = requestParameters.modifiedAt;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/users`,
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: UsersToJSON(requestParameters.users),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async usersPatch(requestParameters: UsersPatchRequest): Promise<void> {
    await this.usersPatchRaw(requestParameters);
  }

  /**
   */
  async usersPostRaw(
    requestParameters: UsersPostRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/users`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UsersToJSON(requestParameters.users),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async usersPost(requestParameters: UsersPostRequest): Promise<void> {
    await this.usersPostRaw(requestParameters);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum UsersDeletePreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum UsersGetPreferEnum {
  Countnone = "count=none",
}
/**
 * @export
 * @enum {string}
 */
export enum UsersPatchPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum UsersPostPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
