/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import { Scans, ScansFromJSON, ScansToJSON } from "../models";

export interface ScansDeleteRequest {
  id?: string;
  initiatingUserId?: string;
  projectProviderId?: string;
  projectName?: string;
  createdAt?: string;
  prefer?: ScansDeletePreferEnum;
}

export interface ScansGetRequest {
  id?: string;
  initiatingUserId?: string;
  projectProviderId?: string;
  projectName?: string;
  createdAt?: string;
  select?: string;
  order?: string;
  range?: string;
  rangeUnit?: string;
  offset?: string;
  limit?: string;
  prefer?: ScansGetPreferEnum;
}

export interface ScansPatchRequest {
  id?: string;
  initiatingUserId?: string;
  projectProviderId?: string;
  projectName?: string;
  createdAt?: string;
  prefer?: ScansPatchPreferEnum;
  scans?: Scans;
}

export interface ScansPostRequest {
  select?: string;
  prefer?: ScansPostPreferEnum;
  scans?: Scans;
}

/**
 *
 */
export class ScansApi extends runtime.BaseAPI {
  /**
   */
  async scansDeleteRaw(
    requestParameters: ScansDeleteRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.initiatingUserId !== undefined) {
      queryParameters["initiating_user_id"] =
        requestParameters.initiatingUserId;
    }

    if (requestParameters.projectProviderId !== undefined) {
      queryParameters["project_provider_id"] =
        requestParameters.projectProviderId;
    }

    if (requestParameters.projectName !== undefined) {
      queryParameters["project_name"] = requestParameters.projectName;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/scans`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async scansDelete(requestParameters: ScansDeleteRequest): Promise<void> {
    await this.scansDeleteRaw(requestParameters);
  }

  /**
   */
  async scansGetRaw(
    requestParameters: ScansGetRequest
  ): Promise<runtime.ApiResponse<Array<Scans>>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.initiatingUserId !== undefined) {
      queryParameters["initiating_user_id"] =
        requestParameters.initiatingUserId;
    }

    if (requestParameters.projectProviderId !== undefined) {
      queryParameters["project_provider_id"] =
        requestParameters.projectProviderId;
    }

    if (requestParameters.projectName !== undefined) {
      queryParameters["project_name"] = requestParameters.projectName;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    if (requestParameters.order !== undefined) {
      queryParameters["order"] = requestParameters.order;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.range !== undefined &&
      requestParameters.range !== null
    ) {
      headerParameters["Range"] = String(requestParameters.range);
    }

    if (
      requestParameters.rangeUnit !== undefined &&
      requestParameters.rangeUnit !== null
    ) {
      headerParameters["Range-Unit"] = String(requestParameters.rangeUnit);
    }

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/scans`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ScansFromJSON)
    );
  }

  /**
   */
  async scansGet(requestParameters: ScansGetRequest): Promise<Array<Scans>> {
    const response = await this.scansGetRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async scansPatchRaw(
    requestParameters: ScansPatchRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.id !== undefined) {
      queryParameters["id"] = requestParameters.id;
    }

    if (requestParameters.initiatingUserId !== undefined) {
      queryParameters["initiating_user_id"] =
        requestParameters.initiatingUserId;
    }

    if (requestParameters.projectProviderId !== undefined) {
      queryParameters["project_provider_id"] =
        requestParameters.projectProviderId;
    }

    if (requestParameters.projectName !== undefined) {
      queryParameters["project_name"] = requestParameters.projectName;
    }

    if (requestParameters.createdAt !== undefined) {
      queryParameters["created_at"] = requestParameters.createdAt;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/scans`,
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: ScansToJSON(requestParameters.scans),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async scansPatch(requestParameters: ScansPatchRequest): Promise<void> {
    await this.scansPatchRaw(requestParameters);
  }

  /**
   */
  async scansPostRaw(
    requestParameters: ScansPostRequest
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.select !== undefined) {
      queryParameters["select"] = requestParameters.select;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.prefer !== undefined &&
      requestParameters.prefer !== null
    ) {
      headerParameters["Prefer"] = String(requestParameters.prefer);
    }

    const response = await this.request({
      path: `/scans`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ScansToJSON(requestParameters.scans),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async scansPost(requestParameters: ScansPostRequest): Promise<void> {
    await this.scansPostRaw(requestParameters);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum ScansDeletePreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum ScansGetPreferEnum {
  Countnone = "count=none",
}
/**
 * @export
 * @enum {string}
 */
export enum ScansPatchPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
/**
 * @export
 * @enum {string}
 */
export enum ScansPostPreferEnum {
  Representation = "return=representation",
  Minimal = "return=minimal",
  None = "return=none",
}
