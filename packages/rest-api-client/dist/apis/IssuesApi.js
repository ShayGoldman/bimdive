"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuesPostPreferEnum = exports.IssuesPatchPreferEnum = exports.IssuesGetPreferEnum = exports.IssuesDeletePreferEnum = exports.IssuesApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class IssuesApi extends runtime.BaseAPI {
    /**
     */
    issuesDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.providerId !== undefined) {
                queryParameters['provider_id'] = requestParameters.providerId;
            }
            if (requestParameters.issueContainerProviderId !== undefined) {
                queryParameters['issue_container_provider_id'] = requestParameters.issueContainerProviderId;
            }
            if (requestParameters.title !== undefined) {
                queryParameters['title'] = requestParameters.title;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.subType !== undefined) {
                queryParameters['sub_type'] = requestParameters.subType;
            }
            if (requestParameters.ownedBy !== undefined) {
                queryParameters['owned_by'] = requestParameters.ownedBy;
            }
            if (requestParameters.assignedTo !== undefined) {
                queryParameters['assigned_to'] = requestParameters.assignedTo;
            }
            if (requestParameters.assignedToType !== undefined) {
                queryParameters['assigned_to_type'] = requestParameters.assignedToType;
            }
            if (requestParameters.dueDate !== undefined) {
                queryParameters['due_date'] = requestParameters.dueDate;
            }
            if (requestParameters.scannedAt !== undefined) {
                queryParameters['scanned_at'] = requestParameters.scannedAt;
            }
            const headerParameters = {};
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/issues`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    issuesDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.issuesDeleteRaw(requestParameters);
        });
    }
    /**
     */
    issuesGetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.providerId !== undefined) {
                queryParameters['provider_id'] = requestParameters.providerId;
            }
            if (requestParameters.issueContainerProviderId !== undefined) {
                queryParameters['issue_container_provider_id'] = requestParameters.issueContainerProviderId;
            }
            if (requestParameters.title !== undefined) {
                queryParameters['title'] = requestParameters.title;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.subType !== undefined) {
                queryParameters['sub_type'] = requestParameters.subType;
            }
            if (requestParameters.ownedBy !== undefined) {
                queryParameters['owned_by'] = requestParameters.ownedBy;
            }
            if (requestParameters.assignedTo !== undefined) {
                queryParameters['assigned_to'] = requestParameters.assignedTo;
            }
            if (requestParameters.assignedToType !== undefined) {
                queryParameters['assigned_to_type'] = requestParameters.assignedToType;
            }
            if (requestParameters.dueDate !== undefined) {
                queryParameters['due_date'] = requestParameters.dueDate;
            }
            if (requestParameters.scannedAt !== undefined) {
                queryParameters['scanned_at'] = requestParameters.scannedAt;
            }
            if (requestParameters.select !== undefined) {
                queryParameters['select'] = requestParameters.select;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            if (requestParameters.range !== undefined && requestParameters.range !== null) {
                headerParameters['Range'] = String(requestParameters.range);
            }
            if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
                headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
            }
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/issues`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.IssuesFromJSON));
        });
    }
    /**
     */
    issuesGet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.issuesGetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    issuesPatchRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.providerId !== undefined) {
                queryParameters['provider_id'] = requestParameters.providerId;
            }
            if (requestParameters.issueContainerProviderId !== undefined) {
                queryParameters['issue_container_provider_id'] = requestParameters.issueContainerProviderId;
            }
            if (requestParameters.title !== undefined) {
                queryParameters['title'] = requestParameters.title;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.subType !== undefined) {
                queryParameters['sub_type'] = requestParameters.subType;
            }
            if (requestParameters.ownedBy !== undefined) {
                queryParameters['owned_by'] = requestParameters.ownedBy;
            }
            if (requestParameters.assignedTo !== undefined) {
                queryParameters['assigned_to'] = requestParameters.assignedTo;
            }
            if (requestParameters.assignedToType !== undefined) {
                queryParameters['assigned_to_type'] = requestParameters.assignedToType;
            }
            if (requestParameters.dueDate !== undefined) {
                queryParameters['due_date'] = requestParameters.dueDate;
            }
            if (requestParameters.scannedAt !== undefined) {
                queryParameters['scanned_at'] = requestParameters.scannedAt;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/issues`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.IssuesToJSON(requestParameters.issues),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    issuesPatch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.issuesPatchRaw(requestParameters);
        });
    }
    /**
     */
    issuesPostRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.select !== undefined) {
                queryParameters['select'] = requestParameters.select;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/issues`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.IssuesToJSON(requestParameters.issues),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    issuesPost(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.issuesPostRaw(requestParameters);
        });
    }
}
exports.IssuesApi = IssuesApi;
/**
    * @export
    * @enum {string}
    */
var IssuesDeletePreferEnum;
(function (IssuesDeletePreferEnum) {
    IssuesDeletePreferEnum["Representation"] = "return=representation";
    IssuesDeletePreferEnum["Minimal"] = "return=minimal";
    IssuesDeletePreferEnum["None"] = "return=none";
})(IssuesDeletePreferEnum = exports.IssuesDeletePreferEnum || (exports.IssuesDeletePreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IssuesGetPreferEnum;
(function (IssuesGetPreferEnum) {
    IssuesGetPreferEnum["Countnone"] = "count=none";
})(IssuesGetPreferEnum = exports.IssuesGetPreferEnum || (exports.IssuesGetPreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IssuesPatchPreferEnum;
(function (IssuesPatchPreferEnum) {
    IssuesPatchPreferEnum["Representation"] = "return=representation";
    IssuesPatchPreferEnum["Minimal"] = "return=minimal";
    IssuesPatchPreferEnum["None"] = "return=none";
})(IssuesPatchPreferEnum = exports.IssuesPatchPreferEnum || (exports.IssuesPatchPreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var IssuesPostPreferEnum;
(function (IssuesPostPreferEnum) {
    IssuesPostPreferEnum["Representation"] = "return=representation";
    IssuesPostPreferEnum["Minimal"] = "return=minimal";
    IssuesPostPreferEnum["None"] = "return=none";
})(IssuesPostPreferEnum = exports.IssuesPostPreferEnum || (exports.IssuesPostPreferEnum = {}));
