"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * This is a dynamic API generated by PostgREST
 *
 * The version of the OpenAPI document: 7.0.1 (UNKNOWN)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScansPostPreferEnum = exports.ScansPatchPreferEnum = exports.ScansGetPreferEnum = exports.ScansDeletePreferEnum = exports.ScansApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ScansApi extends runtime.BaseAPI {
    /**
     */
    scansDeleteRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.initiatingUserId !== undefined) {
                queryParameters['initiating_user_id'] = requestParameters.initiatingUserId;
            }
            if (requestParameters.projectProviderId !== undefined) {
                queryParameters['project_provider_id'] = requestParameters.projectProviderId;
            }
            if (requestParameters.projectName !== undefined) {
                queryParameters['project_name'] = requestParameters.projectName;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt;
            }
            const headerParameters = {};
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/scans`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    scansDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.scansDeleteRaw(requestParameters);
        });
    }
    /**
     */
    scansGetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.initiatingUserId !== undefined) {
                queryParameters['initiating_user_id'] = requestParameters.initiatingUserId;
            }
            if (requestParameters.projectProviderId !== undefined) {
                queryParameters['project_provider_id'] = requestParameters.projectProviderId;
            }
            if (requestParameters.projectName !== undefined) {
                queryParameters['project_name'] = requestParameters.projectName;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt;
            }
            if (requestParameters.select !== undefined) {
                queryParameters['select'] = requestParameters.select;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            if (requestParameters.range !== undefined && requestParameters.range !== null) {
                headerParameters['Range'] = String(requestParameters.range);
            }
            if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
                headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
            }
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/scans`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.ScansFromJSON));
        });
    }
    /**
     */
    scansGet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.scansGetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     */
    scansPatchRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.initiatingUserId !== undefined) {
                queryParameters['initiating_user_id'] = requestParameters.initiatingUserId;
            }
            if (requestParameters.projectProviderId !== undefined) {
                queryParameters['project_provider_id'] = requestParameters.projectProviderId;
            }
            if (requestParameters.projectName !== undefined) {
                queryParameters['project_name'] = requestParameters.projectName;
            }
            if (requestParameters.createdAt !== undefined) {
                queryParameters['created_at'] = requestParameters.createdAt;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/scans`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ScansToJSON(requestParameters.scans),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    scansPatch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.scansPatchRaw(requestParameters);
        });
    }
    /**
     */
    scansPostRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.select !== undefined) {
                queryParameters['select'] = requestParameters.select;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
                headerParameters['Prefer'] = String(requestParameters.prefer);
            }
            const response = yield this.request({
                path: `/scans`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ScansToJSON(requestParameters.scans),
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    scansPost(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.scansPostRaw(requestParameters);
        });
    }
}
exports.ScansApi = ScansApi;
/**
    * @export
    * @enum {string}
    */
var ScansDeletePreferEnum;
(function (ScansDeletePreferEnum) {
    ScansDeletePreferEnum["Representation"] = "return=representation";
    ScansDeletePreferEnum["Minimal"] = "return=minimal";
    ScansDeletePreferEnum["None"] = "return=none";
})(ScansDeletePreferEnum = exports.ScansDeletePreferEnum || (exports.ScansDeletePreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScansGetPreferEnum;
(function (ScansGetPreferEnum) {
    ScansGetPreferEnum["Countnone"] = "count=none";
})(ScansGetPreferEnum = exports.ScansGetPreferEnum || (exports.ScansGetPreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScansPatchPreferEnum;
(function (ScansPatchPreferEnum) {
    ScansPatchPreferEnum["Representation"] = "return=representation";
    ScansPatchPreferEnum["Minimal"] = "return=minimal";
    ScansPatchPreferEnum["None"] = "return=none";
})(ScansPatchPreferEnum = exports.ScansPatchPreferEnum || (exports.ScansPatchPreferEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ScansPostPreferEnum;
(function (ScansPostPreferEnum) {
    ScansPostPreferEnum["Representation"] = "return=representation";
    ScansPostPreferEnum["Minimal"] = "return=minimal";
    ScansPostPreferEnum["None"] = "return=none";
})(ScansPostPreferEnum = exports.ScansPostPreferEnum || (exports.ScansPostPreferEnum = {}));
